{
    "swagger": "2.0",
    "info": {
        "description": "A sample oecloud based application",
        "version": "1.0.0",
        "title": "ftweb"
    },
    "basePath": "/api",
    "paths": {
        "/TypeMappings": {
            "post": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "TypeMapping.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "TypeMapping.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "TypeMapping.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TypeMapping"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/{id}/exists": {
            "get": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "TypeMapping.exists__get_TypeMappings_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/{id}": {
            "head": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "TypeMapping.exists__head_TypeMappings_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "TypeMapping.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "TypeMapping.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "TypeMapping.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseEntity id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/findOne": {
            "get": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "TypeMapping.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TypeMapping"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/count": {
            "get": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "TypeMapping.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/{id}/{version}": {
            "delete": {
                "tags": [
                    "TypeMapping"
                ],
                "summary": "Delete a model instance by id and version number, from the data source.",
                "operationId": "TypeMapping.deleteWithVersion",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/history": {
            "get": {
                "tags": [
                    "TypeMapping"
                ],
                "operationId": "TypeMapping.history",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TypeMappings/{id}/createEventHistory": {
            "post": {
                "tags": [
                    "TypeMapping"
                ],
                "operationId": "TypeMapping.prototype.createEventHistory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseEntity id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "context",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents": {
            "post": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "UIComponent.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "UIComponent.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "UIComponent.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UIComponent"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/{id}/exists": {
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "UIComponent.exists__get_UIComponents_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/{id}": {
            "head": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "UIComponent.exists__head_UIComponents_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "UIComponent.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "UIComponent.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "UIComponent.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UIBase id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/findOne": {
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "UIComponent.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/count": {
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "UIComponent.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/configure": {
            "post": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Configures Default UI for given list of model names",
                "operationId": "UIComponent.configure",
                "parameters": [
                    {
                        "name": "modelList",
                        "in": "query",
                        "description": "list of model names",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/simulate": {
            "post": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "returns an polymer html from given data",
                "operationId": "UIComponent.simulate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UIComponent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "string"
                                },
                                "Content-Type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/modelmeta/{modelName}": {
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Returns Model Meta Data",
                "operationId": "UIComponent.modelmeta",
                "parameters": [
                    {
                        "name": "modelName",
                        "in": "path",
                        "description": "model name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/component/{name}": {
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Returns UI component and additional data..",
                "operationId": "UIComponent.component",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "string"
                                },
                                "Content-Type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/{id}/{version}": {
            "delete": {
                "tags": [
                    "UIComponent"
                ],
                "summary": "Delete a model instance by id and version number, from the data source.",
                "operationId": "UIComponent.deleteWithVersion",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/history": {
            "get": {
                "tags": [
                    "UIComponent"
                ],
                "operationId": "UIComponent.history",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/UIComponents/{id}/createEventHistory": {
            "post": {
                "tags": [
                    "UIComponent"
                ],
                "operationId": "UIComponent.prototype.createEventHistory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UIBase id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "context",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Products": {
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Product.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Product.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Product.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Product"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Products/{id}/exists": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Product.exists__get_Products_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Products/{id}": {
            "head": {
                "tags": [
                    "Product"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Product.exists__head_Products_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Product.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Product"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Product.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Product.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Products/findOne": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Product.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Products/update": {
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Product.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Products/count": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Product.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/{id}/productRelation": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Fetches belongsTo relation productRelation.",
                "operationId": "Item.prototype.__get__productRelation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items": {
            "post": {
                "tags": [
                    "Item"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Item.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Item"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Item.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Item.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Item"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/{id}/exists": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Item.exists__get_Items_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/{id}": {
            "head": {
                "tags": [
                    "Item"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Item.exists__head_Items_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Item.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Item"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Item.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Item"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Item.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/findOne": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Item.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/update": {
            "post": {
                "tags": [
                    "Item"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Item.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/count": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Item.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Items/debug": {
            "get": {
                "tags": [
                    "Item"
                ],
                "summary": "debug",
                "operationId": "Item.debug",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ComboValues/{fieldId}": {
            "get": {
                "tags": [
                    "ComboValue"
                ],
                "summary": "return combo values",
                "operationId": "ComboValue.fetch",
                "parameters": [
                    {
                        "name": "fieldId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments": {
            "post": {
                "tags": [
                    "Department"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Department.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Department"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Department.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Department"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Department.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Department"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments/{id}/exists": {
            "get": {
                "tags": [
                    "Department"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Department.exists__get_Departments_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments/{id}": {
            "head": {
                "tags": [
                    "Department"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Department.exists__head_Departments_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Department"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Department.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Department"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Department.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Department"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Department.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments/findOne": {
            "get": {
                "tags": [
                    "Department"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Department.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments/update": {
            "post": {
                "tags": [
                    "Department"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Department.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments/count": {
            "get": {
                "tags": [
                    "Department"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Department.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Departments/default": {
            "get": {
                "tags": [
                    "Department"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "Department.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties": {
            "post": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Counterparty.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Counterparty.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Counterparty.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Counterparty"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties/{id}/exists": {
            "get": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Counterparty.exists__get_Counterparties_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties/{id}": {
            "head": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Counterparty.exists__head_Counterparties_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Counterparty.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Counterparty.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Counterparty.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties/findOne": {
            "get": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Counterparty.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties/update": {
            "post": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Counterparty.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Counterparty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties/count": {
            "get": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Counterparty.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Counterparties/default": {
            "get": {
                "tags": [
                    "Counterparty"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "Counterparty.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes": {
            "post": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Subtype.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Subtype.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Subtype.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Subtype"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes/{id}/exists": {
            "get": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Subtype.exists__get_Subtypes_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes/{id}": {
            "head": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Subtype.exists__head_Subtypes_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Subtype.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Subtype.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Subtype.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes/findOne": {
            "get": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Subtype.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes/update": {
            "post": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Subtype.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Subtype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes/count": {
            "get": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Subtype.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Subtypes/default": {
            "get": {
                "tags": [
                    "Subtype"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "Subtype.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks": {
            "post": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "TradingBook.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "TradingBook.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "TradingBook.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TradingBook"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks/{id}/exists": {
            "get": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "TradingBook.exists__get_TradingBooks_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks/{id}": {
            "head": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "TradingBook.exists__head_TradingBooks_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "TradingBook.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "TradingBook.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "TradingBook.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks/findOne": {
            "get": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "TradingBook.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks/update": {
            "post": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "TradingBook.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TradingBook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks/count": {
            "get": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "TradingBook.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/TradingBooks/default": {
            "get": {
                "tags": [
                    "TradingBook"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "TradingBook.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities": {
            "post": {
                "tags": [
                    "Entity"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Entity.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Entity"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Entity.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Entity"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Entity.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entity"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities/{id}/exists": {
            "get": {
                "tags": [
                    "Entity"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Entity.exists__get_Entities_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities/{id}": {
            "head": {
                "tags": [
                    "Entity"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Entity.exists__head_Entities_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Entity"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Entity.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Entity"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Entity.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Entity"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Entity.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities/findOne": {
            "get": {
                "tags": [
                    "Entity"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Entity.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities/update": {
            "post": {
                "tags": [
                    "Entity"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Entity.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities/count": {
            "get": {
                "tags": [
                    "Entity"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Entity.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Entities/default": {
            "get": {
                "tags": [
                    "Entity"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "Entity.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells": {
            "post": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "SecurityBuySell.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "SecurityBuySell.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "SecurityBuySell.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SecurityBuySell"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells/{id}/exists": {
            "get": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "SecurityBuySell.exists__get_SecurityBuySells_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells/{id}": {
            "head": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "SecurityBuySell.exists__head_SecurityBuySells_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "SecurityBuySell.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "SecurityBuySell.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "SecurityBuySell.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells/findOne": {
            "get": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "SecurityBuySell.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells/update": {
            "post": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "SecurityBuySell.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityBuySell"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells/count": {
            "get": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "SecurityBuySell.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityBuySells/default": {
            "get": {
                "tags": [
                    "SecurityBuySell"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "SecurityBuySell.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Notes": {
            "post": {
                "tags": [
                    "Note"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Note.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Note"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Note.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Note"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Note.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Note"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Notes/{id}/exists": {
            "get": {
                "tags": [
                    "Note"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Note.exists__get_Notes_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Notes/{id}": {
            "head": {
                "tags": [
                    "Note"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Note.exists__head_Notes_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Note"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Note.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Note"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Note.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Note"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Note.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Notes/findOne": {
            "get": {
                "tags": [
                    "Note"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Note.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Notes/update": {
            "post": {
                "tags": [
                    "Note"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Note.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Notes/count": {
            "get": {
                "tags": [
                    "Note"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Note.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Data/{name}": {
            "get": {
                "tags": [
                    "Data"
                ],
                "summary": "return combo values",
                "operationId": "Data.fetch",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions": {
            "post": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "SecurityDefinition.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "SecurityDefinition.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "SecurityDefinition.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SecurityDefinition"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions/{id}/exists": {
            "get": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "SecurityDefinition.exists__get_SecurityDefinitions_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions/{id}": {
            "head": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "SecurityDefinition.exists__head_SecurityDefinitions_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "SecurityDefinition.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "SecurityDefinition.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "SecurityDefinition.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions/findOne": {
            "get": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "SecurityDefinition.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions/update": {
            "post": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "SecurityDefinition.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecurityDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions/count": {
            "get": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "SecurityDefinition.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityDefinitions/default": {
            "get": {
                "tags": [
                    "SecurityDefinition"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "SecurityDefinition.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector": {
            "post": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "SecuritySelector.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "SecuritySelector.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "SecuritySelector.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SecuritySelector"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector/{id}/exists": {
            "get": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "SecuritySelector.exists__get_SecuritySelector_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector/{id}": {
            "head": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "SecuritySelector.exists__head_SecuritySelector_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "SecuritySelector.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "SecuritySelector.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "SecuritySelector.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector/findOne": {
            "get": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "SecuritySelector.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector/update": {
            "post": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "SecuritySelector.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SecuritySelector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector/count": {
            "get": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "SecuritySelector.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecuritySelector/default": {
            "get": {
                "tags": [
                    "SecuritySelector"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "SecuritySelector.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/SecurityPrices": {
            "get": {
                "tags": [
                    "SecurityPrice"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "SecurityPrice.fetch",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SecurityPrice"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes": {
            "post": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "ChargeCode.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "ChargeCode.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "ChargeCode.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChargeCode"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes/{id}/exists": {
            "get": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ChargeCode.exists__get_ChargeCodes_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes/{id}": {
            "head": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ChargeCode.exists__head_ChargeCodes_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "ChargeCode.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "ChargeCode.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "ChargeCode.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes/findOne": {
            "get": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "ChargeCode.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes/update": {
            "post": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "ChargeCode.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes/count": {
            "get": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "ChargeCode.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeCodes/default": {
            "get": {
                "tags": [
                    "ChargeCode"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "ChargeCode.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Securities/positioninfo": {
            "get": {
                "tags": [
                    "Security"
                ],
                "summary": "return securities position info",
                "operationId": "Security.positionInfo",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs": {
            "post": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "ChargeSlab.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "ChargeSlab.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "ChargeSlab.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChargeSlab"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs/{id}/exists": {
            "get": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ChargeSlab.exists__get_ChargeSlabs_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs/{id}": {
            "head": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ChargeSlab.exists__head_ChargeSlabs_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "ChargeSlab.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "ChargeSlab.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "ChargeSlab.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs/findOne": {
            "get": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "ChargeSlab.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs/update": {
            "post": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "ChargeSlab.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeSlab"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs/count": {
            "get": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "ChargeSlab.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeSlabs/default": {
            "get": {
                "tags": [
                    "ChargeSlab"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "ChargeSlab.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData": {
            "post": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "ChargeData.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "ChargeData.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "ChargeData.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChargeData"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData/{id}/exists": {
            "get": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ChargeData.exists__get_ChargeData_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData/{id}": {
            "head": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ChargeData.exists__head_ChargeData_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "ChargeData.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "ChargeData.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "ChargeData.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData/findOne": {
            "get": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "ChargeData.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData/update": {
            "post": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "ChargeData.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChargeData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData/count": {
            "get": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "ChargeData.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/ChargeData/default": {
            "get": {
                "tags": [
                    "ChargeData"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "ChargeData.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros": {
            "post": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Nostro.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "Nostro.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Nostro.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Nostro"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros/{id}/exists": {
            "get": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Nostro.exists__get_Nostros_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros/{id}": {
            "head": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Nostro.exists__head_Nostros_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "Nostro.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "Nostro.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "Nostro.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "BaseFBO id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros/findOne": {
            "get": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Nostro.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros/update": {
            "post": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "Nostro.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Nostro"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros/count": {
            "get": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Nostro.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Nostros/default": {
            "get": {
                "tags": [
                    "Nostro"
                ],
                "summary": "Sends a request to initialiseFBO",
                "operationId": "Nostro.default",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        }
    },
    "tags": [
        {
            "name": "TypeMapping",
            "description": "Type configuration or mapping to UI Type"
        },
        {
            "name": "UIComponent",
            "description": "Configuration and content for UI components"
        },
        {
            "name": "Product"
        },
        {
            "name": "Item"
        },
        {
            "name": "ComboValue"
        },
        {
            "name": "Department"
        },
        {
            "name": "Counterparty"
        },
        {
            "name": "Subtype"
        },
        {
            "name": "TradingBook"
        },
        {
            "name": "Entity"
        },
        {
            "name": "SecurityBuySell"
        },
        {
            "name": "Note"
        },
        {
            "name": "Data"
        },
        {
            "name": "SecurityDefinition"
        },
        {
            "name": "SecuritySelector"
        },
        {
            "name": "SecurityPrice"
        },
        {
            "name": "ChargeCode"
        },
        {
            "name": "Security"
        },
        {
            "name": "ChargeSlab"
        },
        {
            "name": "ChargeData"
        },
        {
            "name": "Nostro"
        }
    ],
    "consumes": [
        "application/json",
        "application/x-www-form-urlencoded",
        "application/xml",
        "text/xml"
    ],
    "produces": [
        "application/json",
        "application/xml",
        "text/xml",
        "application/javascript",
        "text/javascript"
    ],
    "definitions": {
        "TypeMapping": {
            "description": "Type configuration or mapping to UI Type",
            "properties": {
                "type": {
                    "type": "string"
                },
                "uiType": {
                    "type": "string"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UIAttribute"
                    }
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                },
                "_type": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_createdBy": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_modifiedBy": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_createdOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "_modifiedOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "scope": {
                    "type": "object"
                },
                "_isDeleted": {
                    "default": false,
                    "type": "boolean"
                },
                "_oldVersion": {
                    "type": "string"
                },
                "_version": {
                    "type": "string"
                },
                "_requestId": {
                    "type": "string"
                },
                "_newVersion": {
                    "type": "string"
                }
            },
            "required": [
                "type",
                "uiType",
                "_type",
                "_createdBy",
                "_modifiedBy",
                "_createdOn",
                "_modifiedOn",
                "_version"
            ],
            "additionalProperties": false
        },
        "x-any": {
            "properties": {}
        },
        "UIComponent": {
            "description": "Configuration and content for UI components",
            "properties": {
                "name": {
                    "maximum": 80,
                    "description": "name of UI component, matches Polymer proptotype.is property",
                    "type": "string"
                },
                "templateName": {
                    "description": "Based on templateName component is generatred",
                    "type": "string"
                },
                "resturl": {
                    "description": "url for form data handling",
                    "type": "string"
                },
                "filePath": {
                    "description": "If component is file based, file location",
                    "type": "string"
                },
                "content": {
                    "maximum": 10000,
                    "description": "html content of the component, if not stored it is generated from model metadata",
                    "type": "string"
                },
                "routePath": {
                    "description": "If this UI component handles a route then route path",
                    "type": "string"
                },
                "modelName": {
                    "description": "If this component renders default UI for a model then model name",
                    "type": "string"
                },
                "modelAlias": {
                    "description": "If model Alias is given it is used as primary model for binding, else lower case of modelName is used, for old UI Metadata migration this can be vm",
                    "type": "string"
                },
                "fields": {
                    "description": "fields of default model to be rendered",
                    "type": "object"
                },
                "gridConfig": {
                    "description": "fields to display in grids",
                    "type": "object"
                },
                "options": {
                    "description": "Any data which can be used by UI for this component",
                    "type": "object"
                },
                "polymerConfig": {
                    "description": "Polymer Configuration, used for polymer registration",
                    "type": "object"
                },
                "autoInjectFields": {
                    "default": true,
                    "description": "Whether remaining model fields should be auto injected or not",
                    "type": "boolean"
                },
                "excludeFields": {
                    "description": "Fields which are to be excluded from injection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oeValidations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Validation"
                    }
                },
                "importUrls": {
                    "description": "Additionals Import links for the component",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                },
                "_type": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_createdBy": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_modifiedBy": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_createdOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "_modifiedOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "scope": {
                    "type": "object"
                },
                "_isDeleted": {
                    "default": false,
                    "type": "boolean"
                },
                "_oldVersion": {
                    "type": "string"
                },
                "_version": {
                    "type": "string"
                },
                "_requestId": {
                    "type": "string"
                },
                "_newVersion": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "_type",
                "_createdBy",
                "_modifiedBy",
                "_createdOn",
                "_modifiedOn",
                "_version"
            ],
            "additionalProperties": false
        },
        "Product": {
            "properties": {
                "productId": {
                    "type": "number",
                    "format": "double"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "productId"
            ],
            "additionalProperties": false
        },
        "Item": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                },
                "productRelationId": {
                    "type": "string",
                    "description": "This property has belongsTo relationship with 'Product' model."
                }
            },
            "additionalProperties": false
        },
        "Department": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "lbs_field1": {
                    "type": "string"
                },
                "trantime": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "name",
                "description",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "Counterparty": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "mnemonic": {
                    "type": "string"
                },
                "cpty_status": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "trantime": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "mnemonic",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "Subtype": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "invest_category": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "name",
                "description",
                "invest_category",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "TradingBook": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "parent_trading_book": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "is_root": {
                    "type": "boolean"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "parent_trading_book",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "Entity": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "trading_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "calendar": {
                    "type": "string"
                },
                "nexttrading_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "lasttrading_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "lbs_ccy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "entity_group": {
                    "type": "string"
                },
                "counterparty_string": {
                    "type": "string"
                },
                "day_convention": {
                    "type": "string"
                },
                "is_legalentity": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "trading_date",
                "calendar",
                "nexttrading_date",
                "lasttrading_date",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "SecurityBuySell": {
            "properties": {
                "counterparty_string": {
                    "type": "string"
                },
                "sec_defn_name": {
                    "type": "string"
                },
                "buy_or_sell": {
                    "type": "string"
                },
                "market": {
                    "type": "string"
                },
                "sales_or_interbank": {
                    "type": "string"
                },
                "price_string": {
                    "type": "number",
                    "format": "double"
                },
                "yield": {
                    "type": "number",
                    "format": "double"
                },
                "qty_traded": {
                    "type": "number",
                    "format": "double"
                },
                "settlement_date": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "counterparty_string",
                "sec_defn_name",
                "buy_or_sell",
                "price_string",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "Note": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "additionalProperties": false
        },
        "SecurityDefinition": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "Active_Status": {
                    "type": "string"
                },
                "Aliases": {
                    "type": "string"
                },
                "Alt_ID1": {
                    "type": "string"
                },
                "Trading_Group": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Issuer_FBO_ID": {
                    "type": "string"
                },
                "Issue_Ccy": {
                    "type": "string"
                },
                "Issue_Date": {
                    "type": "string",
                    "format": "date-time"
                },
                "Maturity_Date": {
                    "type": "string",
                    "format": "date-time"
                },
                "Notional_Maturity": {
                    "type": "string"
                },
                "Issuer_String": {
                    "type": "string"
                },
                "Has_Holding": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "name",
                "Active_Status",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "SecuritySelector": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "Active_Status": {
                    "type": "string"
                },
                "Aliases": {
                    "type": "string"
                },
                "Alt_ID1": {
                    "type": "string"
                },
                "Trading_Group": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Issuer_FBO_ID": {
                    "type": "string"
                },
                "Issue_Ccy": {
                    "type": "string"
                },
                "Issue_Date": {
                    "type": "string",
                    "format": "date-time"
                },
                "Maturity_Date": {
                    "type": "string",
                    "format": "date-time"
                },
                "Notional_Maturity": {
                    "type": "string"
                },
                "Issuer_String": {
                    "type": "string"
                },
                "Has_Holding": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "name",
                "Active_Status",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "SecurityPrice": {
            "properties": {
                "SEC_DEFN_NAME": {
                    "type": "string"
                },
                "BID_OFFER": {
                    "type": "string"
                },
                "MRS_NAME": {
                    "type": "string"
                },
                "id": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "SEC_DEFN_NAME",
                "BID_OFFER"
            ],
            "additionalProperties": false
        },
        "ChargeCode": {
            "properties": {
                "charge_code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "product_type": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "charge_method": {
                    "type": "string"
                },
                "charge_type": {
                    "type": "string"
                },
                "base_amt": {
                    "type": "string"
                },
                "charge_ccy": {
                    "type": "string"
                },
                "slab_currency": {
                    "type": "string"
                },
                "num_of_slabs": {
                    "type": "number",
                    "format": "double"
                },
                "unit_value": {
                    "type": "number",
                    "format": "double"
                },
                "broker": {
                    "type": "string"
                },
                "maturity_from": {
                    "type": "string"
                },
                "maturity_to": {
                    "type": "string"
                },
                "currency_list": {
                    "type": "string"
                },
                "exclude": {
                    "type": "number",
                    "format": "double"
                },
                "is_negotiable": {
                    "type": "number",
                    "format": "double"
                },
                "is_default": {
                    "type": "number",
                    "format": "double"
                },
                "next_review_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "is_active": {
                    "type": "number",
                    "format": "double"
                },
                "eligibility_filter": {
                    "type": "string"
                },
                "fee_type": {
                    "type": "string"
                },
                "tenor_method": {
                    "type": "string"
                },
                "slab_unit_type": {
                    "type": "string"
                },
                "rounding_method": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "charge_code",
                "description",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "ChargeSlab": {
            "properties": {
                "parent_fb_num": {
                    "type": "number",
                    "format": "double"
                },
                "srl_num": {
                    "type": "number",
                    "format": "double"
                },
                "slab_amount": {
                    "type": "number",
                    "format": "double"
                },
                "charge": {
                    "type": "number",
                    "format": "double"
                },
                "minimum_amount": {
                    "type": "number",
                    "format": "double"
                },
                "maximum_amount": {
                    "type": "number",
                    "format": "double"
                },
                "additional_charge": {
                    "type": "number",
                    "format": "double"
                },
                "included": {
                    "type": "number",
                    "format": "double"
                },
                "slab_unit": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "parent_fb_num",
                "srl_num",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "ChargeData": {
            "properties": {
                "charge_type": {
                    "type": "number",
                    "format": "double"
                },
                "low_limit": {
                    "type": "number",
                    "format": "double"
                },
                "upper_limit": {
                    "type": "number",
                    "format": "double"
                },
                "charge_calculation": {
                    "type": "number",
                    "format": "double"
                },
                "charge_value": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "charge_type",
                "low_limit",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "Nostro": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "dept": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "lbs_field1": {
                    "type": "string"
                },
                "intermed_inst_format": {
                    "type": "string"
                },
                "trantime": {
                    "type": "string"
                },
                "fbo-type": {
                    "type": "string"
                },
                "fbo_number": {
                    "type": "number",
                    "format": "double"
                },
                "fbo-version": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "name",
                "currency",
                "dept",
                "entity",
                "description",
                "fbo_number"
            ],
            "additionalProperties": false
        },
        "UIAttribute": {
            "properties": {
                "name": {
                    "maximum": 30,
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/x-any"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "name",
                "value"
            ],
            "additionalProperties": false
        },
        "ObjectID": {
            "type": "string",
            "pattern": "^[a-fA-F\\d]{24}$"
        },
        "Validation": {
            "description": "This Model is used to store UI Level Validations",
            "properties": {
                "type": {
                    "maximum": 100,
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "error": {
                    "maximum": 100,
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                },
                "_type": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_createdBy": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_modifiedBy": {
                    "maxLength": 50,
                    "type": "string"
                },
                "_createdOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "_modifiedOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "scope": {
                    "type": "object"
                },
                "_isDeleted": {
                    "default": false,
                    "type": "boolean"
                },
                "_oldVersion": {
                    "type": "string"
                },
                "_version": {
                    "type": "string"
                },
                "_requestId": {
                    "type": "string"
                },
                "_newVersion": {
                    "type": "string"
                }
            },
            "required": [
                "type",
                "_type",
                "_createdBy",
                "_modifiedBy",
                "_createdOn",
                "_modifiedOn",
                "_version"
            ],
            "additionalProperties": false
        }
    }
}